import com.mongodb.MongoClient;
import com.mongodb.MongoClientURI;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import com.mongodb.client.result.UpdateResult;
import com.mongodb.client.result.InsertOneResult;
import org.bson.Document;

import java.util.Date;

public class FriendshipService {

    private final MongoDatabase db;

    public FriendshipService(MongoDatabase database) {
        this.db = database;
    }

    // Update friendship status to Accepted
    public void updateToAccepted(int senderID, int receiverID, String newStatus) {
        MongoCollection<Document> friendshipCollection = db.getCollection("friendship");
        MongoCollection<Document> notificationCollection = db.getCollection("notification");

        try {
            // Update the friendship document
            UpdateResult result = friendshipCollection.updateOne(
                new Document("senderID", senderID)
                        .append("receiverID", receiverID)
                        .append("Status", "Pending"),
                new Document("$set", new Document("Status", newStatus))
            );

            if (result.getModifiedCount() == 0) {
                System.out.println("No pending friendship found to update.");
                return;
            }

            // Create a new notification for the sender to inform about the acceptance
            Document notification = new Document("UserID", senderID)
                    .append("SenderID", receiverID)
                    .append("Timestamp", new Date())
                    .append("Status", "Unread")
                    .append("NotificationType", "Friend request accepted");

            InsertOneResult notificationResult = notificationCollection.insertOne(notification);

            if (notificationResult.wasAcknowledged()) {
                System.out.println("Friendship status updated and new notification created successfully.");
            } else {
                System.out.println("Friendship status updated but failed to create new notification.");
            }
        } catch (Exception e) {
            System.out.println("Error updating friendship status: " + e.getMessage());
        }
    }

    // Decline friend request query
    public void updateToDeclined(int senderID, int receiverID) {
        MongoCollection<Document> friendshipCollection = db.getCollection("friendship");
        MongoCollection<Document> notificationCollection = db.getCollection("notification");

        try {
            // Remove the friendship document
            long deleteFriendshipResult = friendshipCollection.deleteOne(
                new Document("senderID", senderID)
                        .append("receiverID", receiverID)
                        .append("Status", "Pending")
            ).getDeletedCount();

            // If the friendship document was deleted successfully
            if (deleteFriendshipResult > 0) {
                // Remove the corresponding notification
                long deleteNotificationResult = notificationCollection.deleteOne(
                    new Document("UserID", receiverID)
                            .append("SenderID", senderID)
                            .append("Status", "Unread")
                ).getDeletedCount();

                if (deleteNotificationResult > 0) {
                    System.out.println("Friendship request declined and corresponding notification deleted successfully.");
                } else {
                    System.out.println("Friendship request declined, but no corresponding notification found.");
                }
            } else {
                System.out.println("Error: No pending friendship request found for the pair of UserIDs: " + senderID + " and " + receiverID);
            }
        } catch (Exception e) {
            System.out.println("Error declining friendship request: " + e.getMessage());
        }
    }

    // Unfriend users
    public void unfriend(int userID1, int userID2) {
        MongoCollection<Document> friendshipCollection = db.getCollection("friendship");

        try {
            // Remove the friendship document
            long result = friendshipCollection.deleteOne(
                new Document("$or", Arrays.asList(
                    new Document("UserID1", userID1).append("UserID2", userID2).append("Status", "Accepted"),
                    new Document("UserID1", userID2).append("UserID2", userID1).append("Status", "Accepted")
                ))
            ).getDeletedCount();

            if (result == 0) {
                System.out.println("Error: No friendship found to remove.");
                return;
            }

            System.out.println("Friendship removed successfully between UserID: " + userID1 + " and UserID: " + userID2);
        } catch (Exception e) {
            System.out.println("Error unfriending: " + e.getMessage());
        }
    }

    public static void main(String[] args) {
        // Create a MongoDB client and database instance
        MongoClient mongoClient = new MongoClient(new MongoClientURI("mongodb://localhost:27017"));
        MongoDatabase database = mongoClient.getDatabase("yourDatabaseName");

        // Create an instance of FriendshipService
        FriendshipService friendshipService = new FriendshipService(database);

        // Usage example
        friendshipService.createFriendship(1, 2);
        friendshipService.updateToAccepted(1, 2, "Accepted");
        friendshipService.updateToDeclined(1, 2);
        friendshipService.unfriend(1, 2);
    }
}
