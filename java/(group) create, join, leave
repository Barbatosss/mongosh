import com.mongodb.MongoClient;
import com.mongodb.MongoClientURI;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import com.mongodb.client.model.IndexOptions;
import com.mongodb.client.model.Indexes;
import com.mongodb.client.result.InsertOneResult;
import org.bson.Document;

import java.util.Date;

public class GroupService {

    private final MongoDatabase db;

    public GroupService(MongoDatabase database) {
        this.db = database;
    }

    // Function to create a group
    public void createGroup(int userID, String groupName, String description, String privacySetting) {
        MongoCollection<Document> groupCollection = db.getCollection("group");
        MongoCollection<Document> groupMembersCollection = db.getCollection("groupMembers");
        MongoCollection<Document> notificationCollection = db.getCollection("notification");

        try {
            // Generate a new GroupID
            Document highestGroup = groupCollection.find()
                    .sort(new Document("GroupID", -1))
                    .limit(1)
                    .first();

            int newGroupID = highestGroup != null ? highestGroup.getInteger("GroupID") + 1 : 1;

            // Create the group object
            Document group = new Document("GroupID", newGroupID)
                    .append("CreatorUserID", userID)
                    .append("GroupName", groupName)
                    .append("Description", description)
                    .append("PrivacySetting", privacySetting)
                    .append("CreationDate", new Date())
                    .append("MemberCount", 1);

            // Insert the group into the database
            InsertOneResult groupResult = groupCollection.insertOne(group);

            if (!groupResult.wasAcknowledged()) {
                throw new Exception("Failed to insert group.");
            }

            // Add the creator as a member of the group with the role "Creator"
            Document member = new Document("GroupID", newGroupID)
                    .append("UserID", userID)
                    .append("Role", "Creator")
                    .append("JoinDate", new Date());

            groupMembersCollection.insertOne(member);

            System.out.println("Group created successfully with GroupID: " + newGroupID);
        } catch (Exception e) {
            System.out.println("Error creating group: " + e.getMessage());
        }
    }

    // Function to join a group
    public void joinGroup(int userID, int groupID) {
        MongoCollection<Document> groupCollection = db.getCollection("group");
        MongoCollection<Document> groupMembersCollection = db.getCollection("groupMembers");
        MongoCollection<Document> notificationCollection = db.getCollection("notification");

        try {
            // Check if the group exists
            Document group = groupCollection.find(new Document("GroupID", groupID)).first();

            if (group == null) {
                System.out.println("Error: Group not found.");
                return;
            }

            // Check if the user is already a member
            Document existingMember = groupMembersCollection.find(new Document("UserID", userID).append("GroupID", groupID)).first();
            if (existingMember != null) {
                System.out.println("Error: User is already a member of the group.");
                return;
            }

            // Add the user as a member of the group with the role "Member"
            Document member = new Document("GroupID", groupID)
                    .append("UserID", userID)
                    .append("Role", "Member")
                    .append("JoinDate", new Date());

            groupMembersCollection.insertOne(member);

            // Increment the MemberCount in the group document
            groupCollection.updateOne(new Document("GroupID", groupID),
                    new Document("$inc", new Document("MemberCount", 1)));

            // Create a notification for the group creator
            Document notification = new Document("UserID", group.getInteger("CreatorUserID"))
                    .append("SenderID", userID)
                    .append("Timestamp", new Date())
                    .append("Status", "Unread")
                    .append("NotificationType", "Join Group");

            notificationCollection.insertOne(notification);

            System.out.println("UserID " + userID + " joined group with GroupID: " + groupID);
        } catch (Exception e) {
            System.out.println("Error joining group: " + e.getMessage());
        }
    }

    // Function to leave a group
    public void leaveGroup(int userID, int groupID) {
        MongoCollection<Document> groupMembersCollection = db.getCollection("groupMembers");
        MongoCollection<Document> groupCollection = db.getCollection("group");

        try {
            // Check if the user is a member of the group
            Document member = groupMembersCollection.find(new Document("UserID", userID).append("GroupID", groupID)).first();

            if (member == null) {
                System.out.println("Error: User is not a member of the group.");
                return;
            }

            // Delete the membership record
            groupMembersCollection.deleteOne(new Document("UserID", userID).append("GroupID", groupID));

            // Decrement the MemberCount in the group document
            groupCollection.updateOne(new Document("GroupID", groupID),
                    new Document("$inc", new Document("MemberCount", -1)));

            System.out.println("UserID " + userID + " left group with GroupID: " + groupID);
        } catch (Exception e) {
            System.out.println("Error leaving group: " + e.getMessage());
        }
    }

    public static void main(String[] args) {
        // Create a MongoDB client and database instance
        MongoClient mongoClient = new MongoClient(new MongoClientURI("mongodb://localhost:27017"));
        MongoDatabase database = mongoClient.getDatabase("yourDatabaseName");

        // Create an instance of GroupService
        GroupService groupService = new GroupService(database);

        // Usage examples
        groupService.createGroup(1, "Test group", "A group", "Public");
        groupService.joinGroup(2, 1); // UserID 2 joins GroupID 1
        groupService.leaveGroup(2, 1); // UserID 2 leaves GroupID 1
    }
}
