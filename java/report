import java.util.Date;
import java.util.Optional;

public class ReportService {

    private final Database db;

    public ReportService(Database db) {
        this.db = db;
    }

    public void submitReport(int reporterUserID, int reportedEntityID, String entityType) {
        try {
            // Check if the reporter is reporting themselves
            if ("User".equals(entityType) && reporterUserID == reportedEntityID) {
                throw new Exception("You cannot report yourself.");
            }

            // Check if the reporter is reporting their own page
            if ("Page".equals(entityType)) {
                Optional<Page> pageOpt = db.page.findOne(reportedEntityID);
                if (pageOpt.isPresent() && pageOpt.get().getCreatorUserID() == reporterUserID) {
                    throw new Exception("You cannot report a page you created.");
                }
            }

            // Check if the reporter is reporting their own post
            if ("Post".equals(entityType)) {
                Optional<Post> postOpt = db.post.findOne(reportedEntityID);
                if (postOpt.isPresent() && postOpt.get().getAuthorID() == reporterUserID && "User".equals(postOpt.get().getAuthorType())) {
                    throw new Exception("You cannot report a post you created.");
                }
            }

            // Check if the reporter is reporting their own group
            if ("Group".equals(entityType)) {
                Optional<Group> groupOpt = db.group.findOne(reportedEntityID);
                if (groupOpt.isPresent() && groupOpt.get().getCreatorUserID() == reporterUserID) {
                    throw new Exception("You cannot report a group you created.");
                }
            }

            // Check if the user has already reported this entity
            Optional<Report> existingReport = db.report.findOne(reporterUserID, reportedEntityID, entityType);
            if (existingReport.isPresent()) {
                throw new Exception("You have already reported this entity.");
            }

            // Generate a new ReportID
            Optional<Report> highestReportOpt = db.report.findHighestReport();
            int newReportID = highestReportOpt.map(report -> report.getReportID() + 1).orElse(1);

            // Create the report object
            Report report = new Report(newReportID, reporterUserID, reportedEntityID, entityType, new Date());

            // Insert the report into the database
            boolean result = db.report.insertOne(report);

            if (!result) {
                throw new Exception("Failed to insert report.");
            }

            System.out.println("Report submitted successfully with ReportID: " + newReportID);
        } catch (Exception e) {
            System.out.println("Error submitting report: " + e.getMessage());
        }
    }

    public static void main(String[] args) {
        Database db = new Database(); // Assume this initializes your database
        ReportService reportService = new ReportService(db);

        // Usage examples
        reportService.submitReport(1, 2, "User"); // Reporting another user
        reportService.submitReport(1, 3, "Page"); // Reporting another user's page
        reportService.submitReport(1, 4, "Post"); // Reporting another user's post
        reportService.submitReport(1, 5, "Group"); // Reporting another user's group
    }
}

// Placeholder classes and interfaces for the database and entities

class Database {
    public UserCollection user = new UserCollection();
    public PageCollection page = new PageCollection();
    public PostCollection post = new PostCollection();
    public GroupCollection group = new GroupCollection();
    public ReportCollection report = new ReportCollection();
}

class UserCollection {
    public Optional<User> findOne(int userID) {
        // Implement database fetch logic
        return Optional.empty();
    }
}

class PageCollection {
    public Optional<Page> findOne(int pageID) {
        // Implement database fetch logic
        return Optional.empty();
    }
}

class PostCollection {
    public Optional<Post> findOne(int postID) {
        // Implement database fetch logic
        return Optional.empty();
    }
}

class GroupCollection {
    public Optional<Group> findOne(int groupID) {
        // Implement database fetch logic
        return Optional.empty();
    }
}

class ReportCollection {
    public Optional<Report> findOne(int reporterUserID, int reportedEntityID, String entityType) {
        // Implement database fetch logic
        return Optional.empty();
    }

    public Optional<Report> findHighestReport() {
        // Implement database fetch logic
        return Optional.empty();
    }

    public boolean insertOne(Report report) {
        // Implement database insert logic
        return true;
    }
}

// Placeholder classes for the entities

class User {
    private int userID;
    // Additional user fields
}

class Page {
    private int pageID;
    private int creatorUserID;

    public int getCreatorUserID() {
        return creatorUserID;
    }

    // Additional page fields
}

class Post {
    private int postID;
    private int authorID;
    private String authorType;

    public int getAuthorID() {
        return authorID;
    }

    public String getAuthorType() {
        return authorType;
    }

    // Additional post fields
}

class Group {
    private int groupID;
    private int creatorUserID;

    public int getCreatorUserID() {
        return creatorUserID;
    }

    // Additional group fields
}

class Report {
    private int reportID;
    private int reporterUserID;
    private int reportedEntityID;
    private String entityType;
    private Date timestamp;

    public Report(int reportID, int reporterUserID, int reportedEntityID, String entityType, Date timestamp) {
        this.reportID = reportID;
        this.reporterUserID = reporterUserID;
        this.reportedEntityID = reportedEntityID;
        this.entityType = entityType;
        this.timestamp = timestamp;
    }

    public int getReportID() {
        return reportID;
    }

}
