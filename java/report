import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import com.mongodb.client.model.Filters;
import com.mongodb.client.model.Sorts;
import org.bson.Document;
import org.bson.types.ObjectId;

import java.util.Date;

import static com.mongodb.client.model.Filters.*;
import static com.mongodb.client.model.Updates.set;

public class ReportService {

    private final MongoDatabase db;

    public ReportService(MongoDatabase database) {
        this.db = database;
    }

    public void submitReport(int reporterUserID, int reportedEntityID, String entityType) {
        try {
            // Check if the reporter is reporting themselves
            if (entityType.equals("User") && reporterUserID == reportedEntityID) {
                throw new Exception("You cannot report yourself.");
            }

            // Check if the reporter is reporting their own page
            if (entityType.equals("Page")) {
                MongoCollection<Document> pageCollection = db.getCollection("page");
                Document page = pageCollection.find(eq("PageID", reportedEntityID)).first();
                if (page != null && page.getInteger("CreatorUserID") == reporterUserID) {
                    throw new Exception("You cannot report a page you created.");
                }
            }

            // Check if the reporter is reporting their own post
            if (entityType.equals("Post")) {
                MongoCollection<Document> postCollection = db.getCollection("post");
                Document post = postCollection.find(eq("PostID", reportedEntityID)).first();
                if (post != null && post.getInteger("AuthorID") == reporterUserID && post.getString("AuthorType").equals("User")) {
                    throw new Exception("You cannot report a post you created.");
                }
            }

            // Check if the reporter is reporting their own group
            if (entityType.equals("Group")) {
                MongoCollection<Document> groupCollection = db.getCollection("group");
                Document group = groupCollection.find(eq("GroupID", reportedEntityID)).first();
                if (group != null && group.getInteger("CreatorUserID") == reporterUserID) {
                    throw new Exception("You cannot report a group you created.");
                }
            }

            // Generate a new ReportID
            MongoCollection<Document> reportCollection = db.getCollection("report");
            Document highestReport = reportCollection.find().sort(Sorts.descending("ReportID")).first();
            int newReportID = (highestReport != null) ? highestReport.getInteger("ReportID") + 1 : 1;

            // Create the report object
            Document report = new Document("ReportID", newReportID)
                    .append("ReporterUserID", reporterUserID)
                    .append("ReportedEntityID", reportedEntityID)
                    .append("EntityType", entityType)
                    .append("Timestamp", new Date());

            // Insert the report into the database
            reportCollection.insertOne(report);

            System.out.println("Report submitted successfully with ReportID: " + newReportID);
        } catch (Exception e) {
            System.out.println("Error submitting report: " + e.getMessage());
        }
    }

    public static void main(String[] args) {
        // Create a MongoDB client and database instance
        MongoClient mongoClient = new MongoClient(new MongoClientURI("mongodb://localhost:27017"));
        MongoDatabase database = mongoClient.getDatabase("yourDatabaseName");

        // Create an instance of ReportService
        ReportService reportService = new ReportService(database);

        // Sample usage
        reportService.submitReport(1, 1, "User");
        reportService.submitReport(1, 1, "Page");
        reportService.submitReport(1, 1, "Post");
        reportService.submitReport(1, 1, "Group");
    }
}
